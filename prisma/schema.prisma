// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// TriClub specific models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  
  // TriClub specific fields
  firstName     String?
  lastName      String?
  phone         String?
  city          String?
  club          String?
  bio           String?
  level         UserLevel @default(BEGINNER)
  points        Int       @default(0)
  isActive      Boolean   @default(true)
  inviteCode    String?   @unique
  invitedBy     String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
  challenges    UserChallenge[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  pointsHistory PointsHistory[]
  orders        Order[]
  products      Product[]
  reviews       Review[]
  
  inviter       User?     @relation("UserInvites", fields: [invitedBy], references: [id])
  invitees      User[]    @relation("UserInvites")
}

model Workout {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  type        WorkoutType
  duration    Int         // in minutes
  distance    Float?      // in kilometers
  calories    Int?
  avgPace     String?
  heartRate   Int?
  location    String?
  points      Int         @default(0)
  garminId    String?     @unique
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id          String    @id @default(cuid())
  title       String
  description String
  type        ChallengeType
  difficulty  ChallengeDifficulty
  points      Int
  target      Json      // flexible target structure
  duration    Int       // in days
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  participants UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  progress    Json      // flexible progress structure
  completed   Boolean   @default(false)
  completedAt DateTime?
  points      Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  content   String
  image     String?
  location  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id      String @id @default(cuid())
  userId  String
  postId  String
  content String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
}

model PointsHistory {
  id          String      @id @default(cuid())
  userId      String
  points      Int
  type        PointsType
  description String
  reference   String?     // workout id, challenge id, etc.
  
  createdAt   DateTime    @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String        @id @default(cuid())
  sellerId    String
  title       String
  description String
  price       Int           // in cents
  condition   ProductCondition
  category    ProductCategory
  images      String[]
  location    String?
  isActive    Boolean       @default(true)
  isSold      Boolean       @default(false)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  seller      User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orders      Order[]
  reviews     Review[]
}

model Order {
  id        String      @id @default(cuid())
  buyerId   String
  productId String
  amount    Int         // in cents
  status    OrderStatus @default(PENDING)
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  buyer     User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        String @id @default(cuid())
  userId    String
  productId String
  rating    Int    // 1-5
  comment   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
}

// Enums
enum UserLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ELITE
}

enum WorkoutType {
  SWIMMING
  CYCLING
  RUNNING
  TRIATHLON
  OTHER
}

enum ChallengeType {
  INDIVIDUAL
  CLUB
  COMMUNITY
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
  EPIC
}

enum PointsType {
  WORKOUT
  CHALLENGE
  INVITE
  SALE
  REVIEW
  BONUS
}

enum ProductCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

enum ProductCategory {
  SWIMMING
  CYCLING
  RUNNING
  WATCHES
  ACCESSORIES
  CLOTHING
  NUTRITION
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}